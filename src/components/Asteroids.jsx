/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: SebastianSosnowski (https://sketchfab.com/SebastianSosnowski)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/asteroids-pack-rocky-version-adde1ecf129e4509be8af61b84bafa85
Title: Asteroids Pack (rocky version)
*/

import { useLayoutEffect, useRef, useMemo } from "react";
import { useFrame } from "@react-three/fiber";
import { useGLTF } from "@react-three/drei";
import { MathUtils, Matrix4, Object3D, Vector3 } from "three";

const tmp = new Object3D();
const m4 = new Matrix4();

export function Asteroids({ count }) {
    const { nodes, materials } = useGLTF("/models/asteroids/asteroids_pack_rocky_version.glb");

    const ref = useRef();

    const velocities = useMemo(() => {
        let arr = [];
        for (let i = 0; i < count; i++) {
            arr.push(200 * MathUtils.randFloat(0.5, 1));
        }

        return arr;
    }, [count]);
    useLayoutEffect(() => {
        for (let i = 0; i < count; i++) {
            tmp.position.set(
                MathUtils.randFloatSpread(2000.0),
                MathUtils.randFloatSpread(500.0),
                MathUtils.randFloat(0.0, -2000.0)
            );
            tmp.rotation.set(
                MathUtils.randFloatSpread(4 * Math.PI),
                MathUtils.randFloatSpread(4 * Math.PI),
                MathUtils.randFloatSpread(4 * Math.PI)
            );
            tmp.scale.setScalar(MathUtils.randFloat(1, 15.0));
            tmp.updateMatrix();
            ref.current.setMatrixAt(i, tmp.matrix);
        }

        ref.current.instanceMatrix.needsUpdate = true;
    }, [count]);

    useFrame((_, delta) => {
        for (let i = 0; i < count; i++) {
            ref.current.getMatrixAt(i, m4);
            console.log(m4.elements[14]);
            let zPos = m4.elements[14];

            zPos += velocities[i] * delta;
            if (zPos > 100) {
                zPos = -2500;
            }

            m4.elements[14] = zPos;
            ref.current.setMatrixAt(i, m4);
        }
        ref.current.instanceMatrix.needsUpdate = true;
    });

    return (
        <instancedMesh
            ref={ref}
            args={[null, null, count]}
            geometry={nodes["Asteroid_no_1_Material_#3_0"].geometry}
            material={materials.Material_3}
        />
    );
}

useGLTF.preload("/models/asteroids/asteroids_pack_rocky_version.glb");
