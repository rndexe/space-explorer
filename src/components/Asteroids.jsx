/*
Mesh generated by: https://github.com/pmndrs/gltfjsx
Asteroid model Author: SebastianSosnowski (https://sketchfab.com/SebastianSosnowski)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/asteroids-pack-rocky-version-adde1ecf129e4509be8af61b84bafa85
Title: Asteroids Pack (rocky version)
*/

import { useEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { MathUtils, Object3D } from "three";
import { useFrame } from "@react-three/fiber";
import { mutation } from "../utils/stores";
import { LEVEL_SIZE } from "../utils/constants";

export function Asteroids({ count }) {
    const { nodes, materials } = useGLTF("models/asteroids/asteroids_pack_rocky_version.glb");

    const curRef = useRef();
    const nextRef = useRef();
    const curLevel = useRef(0);

    useEffect(() => {
        generateAsteroids(curRef.current, 0, count);
        generateAsteroids(nextRef.current, 1, count);
    }, [count]);

    useFrame(() => {
        if (mutation.level != curLevel.current) {
            curLevel.current = mutation.level;
            generateAsteroids(curLevel.current % 2 ? curRef.current : nextRef.current, curLevel.current + 1, count);
        }
    });

    return (
        <>
            <instancedMesh
                ref={curRef}
                args={[null, null, count]}
                geometry={nodes["Asteroid_no_7_Material_#3_0"].geometry}
                material={materials.Material_3}
            />
            <instancedMesh
                ref={nextRef}
                args={[null, null, count]}
                geometry={nodes["Asteroid_no_6_Material_#3_0"].geometry}
                material={materials.Material_3}
            />
            <fog attach="fog" args={["black", 0, LEVEL_SIZE * 0.875]} />
        </>
    );
}
const generateAsteroids = (iMesh, level, count) => {
    const zOffset = -1.0 * LEVEL_SIZE * level;
    // console.log("Generating mesh from", zOffset, "to", -1.0 * LEVEL_SIZE + zOffset);
    const tmp = new Object3D();

    for (let i = 0; i < count; i++) {
        tmp.position.set(
            MathUtils.randFloatSpread(LEVEL_SIZE),
            MathUtils.randFloatSpread(LEVEL_SIZE / 8),
            MathUtils.randFloat(zOffset, -1.0 * LEVEL_SIZE + zOffset)
        );
        tmp.rotation.set(
            MathUtils.randFloatSpread(4 * Math.PI),
            MathUtils.randFloatSpread(4 * Math.PI),
            MathUtils.randFloatSpread(4 * Math.PI)
        );
        tmp.scale.setScalar(generateGaussian(1, 10.0));
        tmp.updateMatrix();

        iMesh.setMatrixAt(i, tmp.matrix);
    }

    // Recalculate boundingsphere for the instanceMesh to update for camera frustum culling
    iMesh.computeBoundingSphere();
    iMesh.instanceMatrix.needsUpdate = true;
};

const generateGaussian = (mean, std) => {
    const _2PI = Math.PI * 2;
    const u1 = Math.random();
    const u2 = Math.random();

    const z0 = Math.sqrt(-2.0 * Math.log(u1)) * Math.cos(_2PI * u2);
    const z1 = Math.sqrt(-2.0 * Math.log(u1)) * Math.sin(_2PI * u2);

    return z0 * std + mean;
};
useGLTF.preload("models/asteroids/asteroids_pack_rocky_version.glb");
