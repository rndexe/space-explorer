import { useGLTF, useKeyboardControls, PerspectiveCamera } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { useRef } from "react";
import { Vector3, MathUtils } from "three";
import { LEVEL_SIZE } from "../utils/constants";
import { mutation } from "../utils/stores";

const R = 20;
const THETA = Math.PI / 10;

export function Ship() {
    const container = useRef();
    const ship = useRef();
    const [, getKeys] = useKeyboardControls();

    const velocity = useRef(new Vector3(0, 0, -2));
    const acceleration = useRef(new Vector3(5, 5, -5));
    const deceleration = useRef(new Vector3(1, 5, 10));

    useFrame((_, delta) => {
        const { up, down, left, right, boost } = getKeys();

        const acc = acceleration.current.clone().multiplyScalar(delta);
        const dec = deceleration.current.clone().multiplyScalar(delta);
        const vel = velocity.current.clone();

        mutation.level = Math.abs(Math.floor(container.current.position.z / LEVEL_SIZE)) - 1;
        // mutation.speed = Math.abs(velocity.current.z).toFixed(2) * 100;

        if (boost) {
            vel.z += acc.z;
        } else {
            vel.z += dec.z;
        }

        vel.x = updateShipVelocity(vel.x, dec.x, acc.x, left, right);
        vel.y = updateShipVelocity(vel.y, dec.y, acc.y, down, up);
        vel.z = -MathUtils.clamp(Math.abs(vel.z), 2, 25);

        container.current.position.add(vel);
        ship.current.rotation.z = -vel.x * 0.25;
        ship.current.rotation.x = vel.y * 0.15;

        velocity.current.copy(vel);
    });

    return (
        <group>
            <group ref={container}>
                <PerspectiveCamera
                    makeDefault
                    far={2000}
                    position-z={R * Math.cos(THETA)}
                    position-y={R * Math.sin(THETA)}
                />
                <group ref={ship}>
                    <ShipModel rotation={[-Math.PI / 2, 0, -Math.PI]} />
                </group>
            </group>
        </group>
    );
}

function updateShipVelocity(velocity, deceleration, acceleration, controlA, controlB) {
    if ((!controlA && !controlB) || (controlA && controlB)) {
        if (velocity < 0) {
            if (velocity + deceleration > 0) {
                velocity = 0;
            } else {
                velocity += deceleration;
            }
        }
        if (velocity > 0) {
            if (velocity - deceleration < 0) {
                velocity = 0;
            } else {
                velocity -= deceleration;
            }
        }
    }

    if (controlA && !controlB) {
        velocity = Math.max(-2, velocity - acceleration);
    }

    if (!controlA && controlB) {
        // vel.x += acc.current.x * delta;
        velocity = Math.min(2, velocity + acceleration);
    }

    return velocity;
}

/*
Mesh generated by: https://github.com/pmndrs/gltfjsx
Ship model Author: Sergio Sotomayor (https://sketchfab.com/sergiosotomayor)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/toon-spaceship-ce3e358791a84ebc8c9c36f71ce3e603
Title: Toon Spaceship
*/

function ShipModel({ ...props }) {
    const { nodes } = useGLTF("models/spaceship/scene.gltf");

    return (
        <group {...props} dispose={null}>
            <mesh geometry={nodes.Spaceship_fuselage_0.geometry}>
                <meshStandardMaterial color={"#121212"} />
            </mesh>
            <mesh geometry={nodes.Spaceship_frames_0.geometry}>
                <meshStandardMaterial color={"black"} />
            </mesh>
            <mesh geometry={nodes.Spaceship_paint_0.geometry}>
                <meshStandardMaterial color={"black"} />
            </mesh>
            <mesh geometry={nodes.Spaceship_motors_0.geometry}>
                <meshBasicMaterial color={"black"} />
            </mesh>
        </group>
    );
}

useGLTF.preload("models/spaceship/scene.gltf");
